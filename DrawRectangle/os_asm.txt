;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;  file name   : os.asm                                 ;
;  author      : Iglesias-Flores Rebecca                ;
;  description : LC4 Assembly program to serve as an OS ;
;                TRAPS will be implemented in this file ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;   OS - TRAP VECTOR TABLE   ;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.OS
.CODE
.ADDR x8000
  ; TRAP vector table
  JMP TRAP_GETC           ; x00
  JMP TRAP_PUTC           ; x01
  JMP TRAP_GETS           ; x02
  JMP TRAP_PUTS           ; x03
  JMP TRAP_TIMER          ; x04
  JMP TRAP_GETC_TIMER     ; x05
  JMP TRAP_DRAW_PIXEL     ; x06
  JMP TRAP_RESET_VMEM	  ; x07
  JMP TRAP_BLT_VMEM	      ; x08
  JMP TRAP_DRAW_RECT      ; X09

  ;
  ; CIT 593 - TO DO - add a vector for TRAP_DRAW_RECT
  ; place this vector at x8009
  ;
  
  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;   OS - MEMORY ADDRESSES & CONSTANTS   ;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; these handy alias' will be used in the TRAPs that follow
  USER_CODE_ADDR .UCONST x0000	; start of USER code
  OS_CODE_ADDR 	 .UCONST x8000	; start of OS code

  OS_GLOBALS_ADDR .UCONST xA000	; start of OS global mem
  OS_STACK_ADDR   .UCONST xBFFF	; start of OS stack mem

  OS_KBSR_ADDR .UCONST xFE00  	; alias for keyboard status reg
  OS_KBDR_ADDR .UCONST xFE02  	; alias for keyboard data reg, contains n (reading from the keyboard)

  OS_ADSR_ADDR .UCONST xFE04  	; alias for display status register
  OS_ADDR_ADDR .UCONST xFE06  	; alias for display data register

  OS_TSR_ADDR .UCONST xFE08 	; alias for timer status register
  OS_TIR_ADDR .UCONST xFE0A 	; alias for timer interval register

  OS_VDCR_ADDR	.UCONST xFE0C	; video display control register
  OS_MCR_ADDR	.UCONST xFFEE	; machine control register
  OS_VIDEO_NUM_COLS .UCONST #128
  OS_VIDEO_NUM_ROWS .UCONST #124


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;; OS DATA MEMORY RESERVATIONS ;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.DATA
.ADDR xA000
OS_GLOBALS_MEM	.BLKW x1000
;;;  LFSR value used by lfsr code
LFSR .FILL 0x0001

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;; OS VIDEO MEMORY RESERVATION ;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.DATA
.ADDR xC000
OS_VIDEO_MEM .BLKW x3E00

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;   OS & TRAP IMPLEMENTATIONS BEGIN HERE   ;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.CODE
.ADDR x8200
.FALIGN
  ;; first job of OS is to return PennSim to x0000 & downgrade privledge
  CONST R7, #0   ; R7 = 0
  RTI            ; PC = R7 ; PSR[15]=0


;;;;;;;;;;;;;;;;;;;;;;;;;;;   TRAP_GETC   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Function: Get a single character from keyboard
;;; Inputs           - none
;;; Outputs          - R0 = ASCII character from ASCII keyboard

.CODE
TRAP_GETC
    LC R0, OS_KBSR_ADDR  ; R0 = address of keyboard status reg
    LDR R0, R0, #0       ; R0 = value of keyboard status reg
    BRzp TRAP_GETC       ; if R0[15]=1, data is waiting!
                             ; else, loop and check again...

    ; reaching here, means data is waiting in keyboard data reg

    LC R0, OS_KBDR_ADDR  ; R0 = address of keyboard data reg
    LDR R0, R0, #0       ; R0 = value of keyboard data reg
    RTI                  ; PC = R7 ; PSR[15]=0


;;;;;;;;;;;;;;;;;;;;;;;;;;;   TRAP_PUTC   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Function: Put a single character out to ASCII display
;;; Inputs           - R0 = ASCII character to write to ASCII display
;;; Outputs          - none

.CODE
TRAP_PUTC
  LC R1, OS_ADSR_ADDR 	; R1 = address of display status reg
  LDR R1, R1, #0    	; R1 = value of display status reg
  BRzp TRAP_PUTC    	; if R1[15]=1, display is ready to write!
		    	    ; else, loop and check again...

  ; reaching here, means console is ready to display next char

  LC R1, OS_ADDR_ADDR 	; R1 = address of display data reg
  STR R0, R1, #0    	; R1 = value of keyboard data reg (R0)
  RTI			; PC = R7 ; PSR[15]=0


;;;;;;;;;;;;;;;;;;;;;;;;;;;   TRAP_GETS   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Function: Get a string of characters from the ASCII keyboard
;;; Inputs           - R0 = Address to place characters from keyboard
;;; Outputs          - R1 = Lenght of the string without the NULL

.CODE
TRAP_GETS

  ;;
  ;; CIT 593 TO DO: complete this trap
  ;;

WHILE_LOOP
	LC R2, OS_KBSR_ADDR ; r2 holds the status value, whether 1 or not if status is negative
	LDR R2, R2, #0		; you can branched straight from 
	BRzp WHILE_LOOP		; if it's not negative keep checking status

	LC R3, OS_KBDR_ADDR ; ELSE, get key data put in R3
	LDR R3, R3, #0		; load the keydata value into R3, now R3 contains ascii value
	CMPI R3, x0A		; check if keydata == enter
	BRz END_LOOP        ; if R3 is zero, end loop
	STR R3, R0, #0  	; store key data back into r0
	ADD R1, R1, #1		; incrementing length counter
    ADD R0, R0, #1		; incrementing R0
	JMP WHILE_LOOP 		; return to loop

END_LOOP
    CONST R4 x00 		; R4 equals null
	STR R4, R0, #0		; store null into R0
						; return R1 which is length
RTI


;;;;;;;;;;;;;;;;;;;;;;;;;;;   TRAP_PUTS   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Function: Put a string of characters out to ASCII display
;;; Inputs           - R0 = Address for first character
;;; Outputs          - none

.CODE
TRAP_PUTS
  LDR R3, R0, #0        ; load contents of R0 to R3
  CMPI R3, x00          ; start if statement
  BRz ENDPUTS           ; if R3 == x00 then END  
DISPLAY  
  LC R1, OS_ADSR_ADDR 	; R1 = address of display status reg, ASCII register if == -1, then ASCII display is ready to write
  LDR R1, R1, #0    	; R1 = value of display status reg
  BRzp DISPLAY       	; if R1[15]=1, display is ready to write!
		    	        ; else, loop and check again...

  ; reaching here, means console is ready toG display next char

  LC R1, OS_ADDR_ADDR 	; R1 = address of display data reg
  STR R3, R1, #0    	; R1 = value of keyboard data reg (R0)
  ;LDR R3, R0, #0       ; load contents of R0 into R3 and display
  ADD R0, R0, #1        ; increment R0
  BRnzp TRAP_PUTS       ; loop back to DISPLAY
  
  ENDPUTS
  RTI			        ; PC = R7 ; PSR[15]=0

;;;;;;;;;;;;;;;;;;;;;;;;;   TRAP_TIMER   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Function:
;;; Inputs           - R0 = time to wait in milliseconds
;;; Outputs          - none

.CODE
TRAP_TIMER
  LC R1, OS_TIR_ADDR 	; R1 = address of timer interval reg
  STR R0, R1, #0    	; Store R0 in timer interval register

COUNT
  LC R1, OS_TSR_ADDR  	; Save timer status register in R1
  LDR R1, R1, #0    	; Load the contents of TSR in R1
  BRzp COUNT    	; If R1[15]=1, timer has gone off!

  ; reaching this line means we've finished counting R0

  RTI       		; PC = R7 ; PSR[15]=0



;;;;;;;;;;;;;;;;;;;;;;;   TRAP_GETC_TIMER   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Function: Get a single character from keyboard
;;; Inputs           - R0 = time to wait
;;; Outputs          - R0 = ASCII character from keyboard (or NULL)

.CODE
TRAP_GETC_TIMER

  ;;
  ;; CIT 593 TO DO: complete this trap
  ;;

  RTI                  ; PC = R7 ; PSR[15]=0


;;;;;;;;;;;;;;;;;;;;;;;;;   TRAP_DRAW_PIXEL   ;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Function: Draw point on video display
;;; Inputs           - R0 = row to draw on (y)
;;;                  - R1 = column to draw on (x)
;;;                  - R2 = color to draw with
;;; Outputs          - none

.CODE
TRAP_DRAW_PIXEL
  LEA R3, OS_VIDEO_MEM       ; R3=start address of video memory
  LC  R4, OS_VIDEO_NUM_COLS  ; R4=number of columns

  CMPIU R1, #0    	         ; Checks if x coord from input is > 0
  BRn END_PIXEL
  CMPIU R1, #127    	     ; Checks if x coord from input is < 127
  BRp END_PIXEL
  CMPIU R0, #0    	         ; Checks if y coord from input is > 0
  BRn END_PIXEL
  CMPIU R0, #123    	     ; Checks if y coord from input is < 123
  BRp END_PIXEL

  MUL R4, R0, R4      	     ; R4= (row * NUM_COLS)
  ADD R4, R4, R1      	     ; R4= (row * NUM_COLS) + col
  ADD R4, R4, R3      	     ; Add the offset to the start of video memory
  STR R2, R4, #0      	     ; Fill in the pixel with color from user (R2)

END_PIXEL
  RTI       		         ; PC = R7 ; PSR[15]=0
  
  
;;;;;;;;;;;;;;;;;;;;;;;;;   TRAP_DRAW_RECT  ;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Function: Draw point on video display
;;; Inputs           - R0 = row to draw on (y)
;;;                  - R1 = column to draw on (x)
;;;                  - R2 = color to draw with
;;; Outputs          - none

;TRAP_DRAW_RECTANGLE
;File Register
;R0 x location - columns
;R1 y location - rows
;R2 length of the rectangle
;R3 width of the side of the rectangle (in number of pixels)
;R4 the color of the rectangle
;R5 pointer to where we're drawing
;R6 hold data memory address

.CODE
TRAP_DRAW_RECT

    
    CONST R5, x80    
    CMPU R0, R5                ; if x coordinate is valid (< OS_VIDEO_NUM_COLS)
    BRzp END_NEW                  ; if greater than 128 go to END_NEW
    CMPIU R1, #124                ; if y coordinate is valid (< OS_VIDEO_NUM_ROWS)
    BRzp END_NEW                  ; if greater than 124 go to END_NEW
    ADD R2, R2, R0                ; R0 is x coordinate plus width, end of where I'm drawing, 
    CMPU R3, R5                   ; if (x coordinate + width) greater than address at 128 store in pointer register, don't forget to reset R5 and R0 restore with LDR
    BRzp END_NEW                  ; if less than address at 128 go to END_NEW
    ADD R3, R3, R1                ; if (y coordinate + length) greater than address at 124 store in pointer register, don't forget to reset R5 and R0 restore with LDR
    CMPIU R2, #124                ; comparing vertical coordinate with 124
    BRzp END_NEW                  ; if less than address at 124 go to END_NEW
    ;make sure x and y are greater than zero
    
    CONST R5, x00
    HICONST R5, x40           ; R5 stores at beginning of 4000
    STR R0, R5, #0            ; I'm storing the content of R0 into R5's address
   
LOOP_THRU_ROWS
    CONST R5, x00
    HICONST R5, x40           ; R5 stores at beginning of 4000
    CMPU R1, R3               ; comparing y coordinate with y coor + length 
    BRzp END_LOOP_THRU_ROWS    ; if it doesn't meet criteria END (zero or positive) 
    LDR R0, R5, #0             ; resetting R0
    LOOP_THRU_COLS             ; start inner loop
    CMPU R0, R2               ; compare x coordinate with x coor + width
    BRzp END_LOOP_THRU_COLS    ; if it doesn't meet criteria END (zero or positive)
    CONST R5, #128             ; 128 for comparison in equation
    CONST R6, x00              ; xC000 for comparison in equation const hiconst
    HICONST R6, xC0            ; store high bits
    MUL R5, R5, R1             ; 128 x Y, store back into R5
    ADD R5, R5, R0             ; (128*y) + x
    ADD R5, R5, R6             ; XC000 + (128*y) + x
    STR R4, R5, #0             ; draw in pixel at pointer
    ADD R0, R0, #1             ; increment y
    BRnzp LOOP_THRU_COLS
    END_LOOP_THRU_COLS
    ADD R1, R1, #1
    BRnzp LOOP_THRU_ROWS    
END_LOOP_THRU_ROWS    

  

    
 
END_NEW
RTI       		              ; PC = R7 ; PSR[15]=0   
  
;    MUL R1, #128 
;    LEA R5, R0                    ; R5=start address of video memory
;    STR R4, R5, #0      	      ; Fill in the pixel with color from user (R2), ADD & STR
;    LEA R5, R1                    ; R5=start address of video memory
;    STR R4, R5, #0      	      ; Fill in the pixel with color from user (R2), ADD & STR 
    
;    STR R4, R5, #0                ; then color that pixel //then I need to reset R0 
;    STR R0, R6, #0                ; reseting R0 back to normal
;    ADD R1, R3, R1                ; add y coordinate with width

;    STR R4, R5, #0                ; then color that pixel
;    BRnzp MY_LOOP_DRAW            ; keep looping

 


;;;;;;;;;;;;;;;;;;;;;;;;;;;;; TRAP_RESET_VMEM ;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; In double-buffered video mode, resets the video display
;;; CIT 593 students do not need to modify this trap, it's for future HWs
;;; Inputs - none
;;; Outputs - none
.CODE	
TRAP_RESET_VMEM
	LC R4, OS_VDCR_ADDR
	CONST R5, #1
	STR R5, R4, #0
	RTI

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; TRAP_BLT_VMEM ;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; TRAP_BLT_VMEM - In double-buffered video mode, copies the contents
;;; of video memory to the video display.
;;; CIT 593 students do not need to modify this trap, it's for future HWs
;;; Inputs - none
;;; Outputs - none
.CODE
TRAP_BLT_VMEM
	LC R4, OS_VDCR_ADDR
	CONST R5, #2
	STR R5, R4, #0
	RTI




;; CIT 593 TO DO: Add TRAP: TRAP_DRAW_RECT